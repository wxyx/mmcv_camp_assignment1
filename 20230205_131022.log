2023-02-05 13:10:22,858 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3090
CUDA_HOME: /data/apps/cuda/11.3
NVCC: Cuda compilation tools, release 11.3, V11.3.58
GCC: gcc (GCC) 7.3.0
PyTorch: 1.12.1+cu113
PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.13.1+cu113
OpenCV: 4.7.0
MMCV: 1.7.0
MMCV Compiler: GCC 9.3
MMCV CUDA Compiler: 11.3
MMClassification: 0.25.0+3d4f80d
------------------------------------------------------------

2023-02-05 13:10:22,860 - mmcls - INFO - Distributed training: False
2023-02-05 13:10:23,013 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=18,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=5,
        in_channels=512,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, )))
dataset_type = 'ImageNet'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=2,
    train=dict(
        type='ImageNet',
        data_prefix='data/test_flower/train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ],
        ann_file='data/test_flower/train.txt',
        classes='data/test_flower/classes.txt'),
    val=dict(
        type='ImageNet',
        data_prefix='data/test_flower/val',
        ann_file='data/test_flower/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        classes='data/test_flower/classes.txt'),
    test=dict(
        type='ImageNet',
        data_prefix='data/imagenet/val',
        ann_file='data/imagenet/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(
    interval=1, metric='accuracy', metric_options=dict(topk=(1, )))
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = '/HOME/scz0aqj/run/mmclassification/mmclassification/checkpoints/resnet18_batch256_imagenet_20200708-34ab8f90.pth'
resume_from = None
workflow = [('train', 1)]
optimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[1])
runner = dict(type='EpochBasedRunner', max_epochs=100)
work_dir = 'work/resnet18_b32_flower'
gpu_ids = [0]

2023-02-05 13:10:23,015 - mmcls - INFO - Set random seed to 48774406, deterministic: False
2023-02-05 13:10:23,091 - mmcls - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2023-02-05 13:10:23,181 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([128, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([256, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([5, 512]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 
2023-02-05 13:10:25,061 - mmcls - INFO - load checkpoint from local path: /HOME/scz0aqj/run/mmclassification/mmclassification/checkpoints/resnet18_batch256_imagenet_20200708-34ab8f90.pth
2023-02-05 13:10:25,232 - mmcls - WARNING - The model and loaded state dict do not match exactly

size mismatch for head.fc.weight: copying a param with shape torch.Size([1000, 512]) from checkpoint, the shape in current model is torch.Size([5, 512]).
size mismatch for head.fc.bias: copying a param with shape torch.Size([1000]) from checkpoint, the shape in current model is torch.Size([5]).
2023-02-05 13:10:25,233 - mmcls - INFO - Start running, host: scz0aqj@g0099, work_dir: /data/run01/scz0aqj/mmclassification/mmclassification/work/resnet18_b32_flower
2023-02-05 13:10:25,234 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-05 13:10:25,234 - mmcls - INFO - workflow: [('train', 1)], max: 100 epochs
2023-02-05 13:10:25,234 - mmcls - INFO - Checkpoints will be saved to /data/run01/scz0aqj/mmclassification/mmclassification/work/resnet18_b32_flower by HardDiskBackend.
2023-02-05 13:10:51,767 - mmcls - INFO - Saving checkpoint at 1 epochs
2023-02-05 13:10:59,853 - mmcls - INFO - Epoch(val) [1][18]	accuracy_top-1: 91.7832
2023-02-05 13:11:05,281 - mmcls - INFO - Saving checkpoint at 2 epochs
2023-02-05 13:11:06,263 - mmcls - INFO - Epoch(val) [2][18]	accuracy_top-1: 91.7832
2023-02-05 13:11:11,683 - mmcls - INFO - Saving checkpoint at 3 epochs
2023-02-05 13:11:12,655 - mmcls - INFO - Epoch(val) [3][18]	accuracy_top-1: 93.0070
2023-02-05 13:11:18,061 - mmcls - INFO - Saving checkpoint at 4 epochs
2023-02-05 13:11:19,039 - mmcls - INFO - Epoch(val) [4][18]	accuracy_top-1: 92.8322
2023-02-05 13:11:24,407 - mmcls - INFO - Saving checkpoint at 5 epochs
2023-02-05 13:11:25,383 - mmcls - INFO - Epoch(val) [5][18]	accuracy_top-1: 93.1818
2023-02-05 13:11:30,781 - mmcls - INFO - Saving checkpoint at 6 epochs
2023-02-05 13:11:31,757 - mmcls - INFO - Epoch(val) [6][18]	accuracy_top-1: 92.6573
2023-02-05 13:11:37,201 - mmcls - INFO - Saving checkpoint at 7 epochs
2023-02-05 13:11:38,174 - mmcls - INFO - Epoch(val) [7][18]	accuracy_top-1: 93.0070
2023-02-05 13:11:43,595 - mmcls - INFO - Saving checkpoint at 8 epochs
2023-02-05 13:11:44,580 - mmcls - INFO - Epoch(val) [8][18]	accuracy_top-1: 94.0559
2023-02-05 13:11:50,051 - mmcls - INFO - Saving checkpoint at 9 epochs
2023-02-05 13:11:51,023 - mmcls - INFO - Epoch(val) [9][18]	accuracy_top-1: 93.8811
2023-02-05 13:11:56,444 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-05 13:11:57,419 - mmcls - INFO - Epoch(val) [10][18]	accuracy_top-1: 94.2308
2023-02-05 13:12:02,825 - mmcls - INFO - Saving checkpoint at 11 epochs
2023-02-05 13:12:03,803 - mmcls - INFO - Epoch(val) [11][18]	accuracy_top-1: 94.0559
2023-02-05 13:12:09,218 - mmcls - INFO - Saving checkpoint at 12 epochs
2023-02-05 13:12:10,185 - mmcls - INFO - Epoch(val) [12][18]	accuracy_top-1: 94.4056
2023-02-05 13:12:15,564 - mmcls - INFO - Saving checkpoint at 13 epochs
2023-02-05 13:12:16,539 - mmcls - INFO - Epoch(val) [13][18]	accuracy_top-1: 94.0559
2023-02-05 13:12:21,945 - mmcls - INFO - Saving checkpoint at 14 epochs
2023-02-05 13:12:22,921 - mmcls - INFO - Epoch(val) [14][18]	accuracy_top-1: 94.9301
2023-02-05 13:12:28,323 - mmcls - INFO - Saving checkpoint at 15 epochs
2023-02-05 13:12:29,298 - mmcls - INFO - Epoch(val) [15][18]	accuracy_top-1: 94.2308
2023-02-05 13:12:34,727 - mmcls - INFO - Saving checkpoint at 16 epochs
2023-02-05 13:12:35,695 - mmcls - INFO - Epoch(val) [16][18]	accuracy_top-1: 94.5804
2023-02-05 13:12:41,150 - mmcls - INFO - Saving checkpoint at 17 epochs
2023-02-05 13:12:42,120 - mmcls - INFO - Epoch(val) [17][18]	accuracy_top-1: 94.2308
2023-02-05 13:12:47,532 - mmcls - INFO - Saving checkpoint at 18 epochs
2023-02-05 13:12:48,510 - mmcls - INFO - Epoch(val) [18][18]	accuracy_top-1: 94.5804
2023-02-05 13:12:53,938 - mmcls - INFO - Saving checkpoint at 19 epochs
2023-02-05 13:12:54,909 - mmcls - INFO - Epoch(val) [19][18]	accuracy_top-1: 94.7552
2023-02-05 13:13:00,327 - mmcls - INFO - Saving checkpoint at 20 epochs
2023-02-05 13:13:01,300 - mmcls - INFO - Epoch(val) [20][18]	accuracy_top-1: 94.7552
2023-02-05 13:13:06,683 - mmcls - INFO - Saving checkpoint at 21 epochs
2023-02-05 13:13:07,659 - mmcls - INFO - Epoch(val) [21][18]	accuracy_top-1: 94.2308
2023-02-05 13:13:13,085 - mmcls - INFO - Saving checkpoint at 22 epochs
2023-02-05 13:13:14,053 - mmcls - INFO - Epoch(val) [22][18]	accuracy_top-1: 94.5804
2023-02-05 13:13:19,481 - mmcls - INFO - Saving checkpoint at 23 epochs
2023-02-05 13:13:20,453 - mmcls - INFO - Epoch(val) [23][18]	accuracy_top-1: 94.9301
2023-02-05 13:13:25,860 - mmcls - INFO - Saving checkpoint at 24 epochs
2023-02-05 13:13:26,828 - mmcls - INFO - Epoch(val) [24][18]	accuracy_top-1: 94.7552
2023-02-05 13:13:32,252 - mmcls - INFO - Saving checkpoint at 25 epochs
2023-02-05 13:13:33,222 - mmcls - INFO - Epoch(val) [25][18]	accuracy_top-1: 94.4056
2023-02-05 13:13:38,612 - mmcls - INFO - Saving checkpoint at 26 epochs
2023-02-05 13:13:39,586 - mmcls - INFO - Epoch(val) [26][18]	accuracy_top-1: 94.9301
2023-02-05 13:13:45,001 - mmcls - INFO - Saving checkpoint at 27 epochs
2023-02-05 13:13:45,979 - mmcls - INFO - Epoch(val) [27][18]	accuracy_top-1: 94.9301
2023-02-05 13:13:51,383 - mmcls - INFO - Saving checkpoint at 28 epochs
2023-02-05 13:13:52,352 - mmcls - INFO - Epoch(val) [28][18]	accuracy_top-1: 94.9301
2023-02-05 13:13:57,804 - mmcls - INFO - Saving checkpoint at 29 epochs
2023-02-05 13:13:58,778 - mmcls - INFO - Epoch(val) [29][18]	accuracy_top-1: 94.5804
2023-02-05 13:14:04,184 - mmcls - INFO - Saving checkpoint at 30 epochs
2023-02-05 13:14:05,160 - mmcls - INFO - Epoch(val) [30][18]	accuracy_top-1: 95.1049
2023-02-05 13:14:10,592 - mmcls - INFO - Saving checkpoint at 31 epochs
2023-02-05 13:14:11,566 - mmcls - INFO - Epoch(val) [31][18]	accuracy_top-1: 94.4056
2023-02-05 13:14:17,010 - mmcls - INFO - Saving checkpoint at 32 epochs
2023-02-05 13:14:17,987 - mmcls - INFO - Epoch(val) [32][18]	accuracy_top-1: 95.1049
2023-02-05 13:14:23,423 - mmcls - INFO - Saving checkpoint at 33 epochs
2023-02-05 13:14:24,399 - mmcls - INFO - Epoch(val) [33][18]	accuracy_top-1: 95.1049
2023-02-05 13:14:29,844 - mmcls - INFO - Saving checkpoint at 34 epochs
2023-02-05 13:14:30,816 - mmcls - INFO - Epoch(val) [34][18]	accuracy_top-1: 95.4545
2023-02-05 13:14:36,277 - mmcls - INFO - Saving checkpoint at 35 epochs
2023-02-05 13:14:37,250 - mmcls - INFO - Epoch(val) [35][18]	accuracy_top-1: 94.9301
2023-02-05 13:14:42,685 - mmcls - INFO - Saving checkpoint at 36 epochs
2023-02-05 13:14:43,658 - mmcls - INFO - Epoch(val) [36][18]	accuracy_top-1: 95.4545
2023-02-05 13:14:49,062 - mmcls - INFO - Saving checkpoint at 37 epochs
2023-02-05 13:14:50,035 - mmcls - INFO - Epoch(val) [37][18]	accuracy_top-1: 95.2797
2023-02-05 13:14:55,499 - mmcls - INFO - Saving checkpoint at 38 epochs
2023-02-05 13:14:56,475 - mmcls - INFO - Epoch(val) [38][18]	accuracy_top-1: 95.2797
2023-02-05 13:15:01,908 - mmcls - INFO - Saving checkpoint at 39 epochs
2023-02-05 13:15:02,876 - mmcls - INFO - Epoch(val) [39][18]	accuracy_top-1: 94.4056
2023-02-05 13:15:08,311 - mmcls - INFO - Saving checkpoint at 40 epochs
2023-02-05 13:15:09,287 - mmcls - INFO - Epoch(val) [40][18]	accuracy_top-1: 95.4545
2023-02-05 13:15:14,712 - mmcls - INFO - Saving checkpoint at 41 epochs
2023-02-05 13:15:15,693 - mmcls - INFO - Epoch(val) [41][18]	accuracy_top-1: 95.1049
2023-02-05 13:15:21,099 - mmcls - INFO - Saving checkpoint at 42 epochs
2023-02-05 13:15:22,078 - mmcls - INFO - Epoch(val) [42][18]	accuracy_top-1: 94.5804
2023-02-05 13:15:27,469 - mmcls - INFO - Saving checkpoint at 43 epochs
2023-02-05 13:15:28,464 - mmcls - INFO - Epoch(val) [43][18]	accuracy_top-1: 95.1049
2023-02-05 13:15:33,889 - mmcls - INFO - Saving checkpoint at 44 epochs
2023-02-05 13:15:34,856 - mmcls - INFO - Epoch(val) [44][18]	accuracy_top-1: 94.2308
2023-02-05 13:15:40,241 - mmcls - INFO - Saving checkpoint at 45 epochs
2023-02-05 13:15:41,212 - mmcls - INFO - Epoch(val) [45][18]	accuracy_top-1: 94.9301
2023-02-05 13:15:46,659 - mmcls - INFO - Saving checkpoint at 46 epochs
2023-02-05 13:15:47,628 - mmcls - INFO - Epoch(val) [46][18]	accuracy_top-1: 95.1049
2023-02-05 13:15:53,028 - mmcls - INFO - Saving checkpoint at 47 epochs
2023-02-05 13:15:53,997 - mmcls - INFO - Epoch(val) [47][18]	accuracy_top-1: 95.2797
2023-02-05 13:15:59,449 - mmcls - INFO - Saving checkpoint at 48 epochs
2023-02-05 13:16:00,418 - mmcls - INFO - Epoch(val) [48][18]	accuracy_top-1: 94.9301
2023-02-05 13:16:05,822 - mmcls - INFO - Saving checkpoint at 49 epochs
2023-02-05 13:16:06,789 - mmcls - INFO - Epoch(val) [49][18]	accuracy_top-1: 95.4545
2023-02-05 13:16:12,226 - mmcls - INFO - Saving checkpoint at 50 epochs
2023-02-05 13:16:13,199 - mmcls - INFO - Epoch(val) [50][18]	accuracy_top-1: 94.7552
2023-02-05 13:16:18,585 - mmcls - INFO - Saving checkpoint at 51 epochs
2023-02-05 13:16:19,555 - mmcls - INFO - Epoch(val) [51][18]	accuracy_top-1: 95.1049
2023-02-05 13:16:24,955 - mmcls - INFO - Saving checkpoint at 52 epochs
2023-02-05 13:16:25,931 - mmcls - INFO - Epoch(val) [52][18]	accuracy_top-1: 95.4545
2023-02-05 13:16:31,406 - mmcls - INFO - Saving checkpoint at 53 epochs
2023-02-05 13:16:32,372 - mmcls - INFO - Epoch(val) [53][18]	accuracy_top-1: 95.8042
2023-02-05 13:16:37,786 - mmcls - INFO - Saving checkpoint at 54 epochs
2023-02-05 13:16:38,759 - mmcls - INFO - Epoch(val) [54][18]	accuracy_top-1: 94.9301
2023-02-05 13:16:44,222 - mmcls - INFO - Saving checkpoint at 55 epochs
2023-02-05 13:16:45,192 - mmcls - INFO - Epoch(val) [55][18]	accuracy_top-1: 95.4545
2023-02-05 13:16:50,625 - mmcls - INFO - Saving checkpoint at 56 epochs
2023-02-05 13:16:51,596 - mmcls - INFO - Epoch(val) [56][18]	accuracy_top-1: 95.6294
2023-02-05 13:16:57,074 - mmcls - INFO - Saving checkpoint at 57 epochs
2023-02-05 13:16:58,047 - mmcls - INFO - Epoch(val) [57][18]	accuracy_top-1: 95.6294
2023-02-05 13:17:03,499 - mmcls - INFO - Saving checkpoint at 58 epochs
2023-02-05 13:17:04,461 - mmcls - INFO - Epoch(val) [58][18]	accuracy_top-1: 94.9301
2023-02-05 13:17:09,864 - mmcls - INFO - Saving checkpoint at 59 epochs
2023-02-05 13:17:10,830 - mmcls - INFO - Epoch(val) [59][18]	accuracy_top-1: 95.1049
2023-02-05 13:17:16,302 - mmcls - INFO - Saving checkpoint at 60 epochs
2023-02-05 13:17:17,275 - mmcls - INFO - Epoch(val) [60][18]	accuracy_top-1: 95.2797
2023-02-05 13:17:22,729 - mmcls - INFO - Saving checkpoint at 61 epochs
2023-02-05 13:17:23,705 - mmcls - INFO - Epoch(val) [61][18]	accuracy_top-1: 95.2797
2023-02-05 13:17:29,114 - mmcls - INFO - Saving checkpoint at 62 epochs
2023-02-05 13:17:30,087 - mmcls - INFO - Epoch(val) [62][18]	accuracy_top-1: 95.4545
2023-02-05 13:17:35,530 - mmcls - INFO - Saving checkpoint at 63 epochs
2023-02-05 13:17:36,505 - mmcls - INFO - Epoch(val) [63][18]	accuracy_top-1: 94.7552
2023-02-05 13:17:41,985 - mmcls - INFO - Saving checkpoint at 64 epochs
2023-02-05 13:17:42,959 - mmcls - INFO - Epoch(val) [64][18]	accuracy_top-1: 95.2797
2023-02-05 13:17:48,410 - mmcls - INFO - Saving checkpoint at 65 epochs
2023-02-05 13:17:49,384 - mmcls - INFO - Epoch(val) [65][18]	accuracy_top-1: 95.8042
2023-02-05 13:17:54,809 - mmcls - INFO - Saving checkpoint at 66 epochs
2023-02-05 13:17:55,777 - mmcls - INFO - Epoch(val) [66][18]	accuracy_top-1: 95.6294
2023-02-05 13:18:01,180 - mmcls - INFO - Saving checkpoint at 67 epochs
2023-02-05 13:18:02,157 - mmcls - INFO - Epoch(val) [67][18]	accuracy_top-1: 94.9301
2023-02-05 13:18:07,560 - mmcls - INFO - Saving checkpoint at 68 epochs
2023-02-05 13:18:08,534 - mmcls - INFO - Epoch(val) [68][18]	accuracy_top-1: 95.8042
2023-02-05 13:18:13,987 - mmcls - INFO - Saving checkpoint at 69 epochs
2023-02-05 13:18:14,963 - mmcls - INFO - Epoch(val) [69][18]	accuracy_top-1: 95.4545
2023-02-05 13:18:20,360 - mmcls - INFO - Saving checkpoint at 70 epochs
2023-02-05 13:18:21,332 - mmcls - INFO - Epoch(val) [70][18]	accuracy_top-1: 95.8042
2023-02-05 13:18:26,810 - mmcls - INFO - Saving checkpoint at 71 epochs
2023-02-05 13:18:27,783 - mmcls - INFO - Epoch(val) [71][18]	accuracy_top-1: 95.4545
2023-02-05 13:18:33,176 - mmcls - INFO - Saving checkpoint at 72 epochs
2023-02-05 13:18:34,147 - mmcls - INFO - Epoch(val) [72][18]	accuracy_top-1: 96.1538
2023-02-05 13:18:39,585 - mmcls - INFO - Saving checkpoint at 73 epochs
2023-02-05 13:18:40,555 - mmcls - INFO - Epoch(val) [73][18]	accuracy_top-1: 95.8042
2023-02-05 13:18:46,005 - mmcls - INFO - Saving checkpoint at 74 epochs
2023-02-05 13:18:46,979 - mmcls - INFO - Epoch(val) [74][18]	accuracy_top-1: 95.1049
2023-02-05 13:18:52,447 - mmcls - INFO - Saving checkpoint at 75 epochs
2023-02-05 13:18:53,644 - mmcls - INFO - Epoch(val) [75][18]	accuracy_top-1: 95.2797
2023-02-05 13:18:59,110 - mmcls - INFO - Saving checkpoint at 76 epochs
2023-02-05 13:19:00,085 - mmcls - INFO - Epoch(val) [76][18]	accuracy_top-1: 95.6294
2023-02-05 13:19:05,542 - mmcls - INFO - Saving checkpoint at 77 epochs
2023-02-05 13:19:06,514 - mmcls - INFO - Epoch(val) [77][18]	accuracy_top-1: 95.6294
2023-02-05 13:19:11,918 - mmcls - INFO - Saving checkpoint at 78 epochs
2023-02-05 13:19:12,892 - mmcls - INFO - Epoch(val) [78][18]	accuracy_top-1: 95.2797
2023-02-05 13:19:18,335 - mmcls - INFO - Saving checkpoint at 79 epochs
2023-02-05 13:19:19,310 - mmcls - INFO - Epoch(val) [79][18]	accuracy_top-1: 95.6294
2023-02-05 13:19:24,754 - mmcls - INFO - Saving checkpoint at 80 epochs
2023-02-05 13:19:25,731 - mmcls - INFO - Epoch(val) [80][18]	accuracy_top-1: 95.6294
2023-02-05 13:19:31,177 - mmcls - INFO - Saving checkpoint at 81 epochs
2023-02-05 13:19:32,154 - mmcls - INFO - Epoch(val) [81][18]	accuracy_top-1: 94.9301
2023-02-05 13:19:37,608 - mmcls - INFO - Saving checkpoint at 82 epochs
2023-02-05 13:19:38,708 - mmcls - INFO - Epoch(val) [82][18]	accuracy_top-1: 95.2797
2023-02-05 13:19:44,126 - mmcls - INFO - Saving checkpoint at 83 epochs
2023-02-05 13:19:45,095 - mmcls - INFO - Epoch(val) [83][18]	accuracy_top-1: 95.2797
2023-02-05 13:19:50,522 - mmcls - INFO - Saving checkpoint at 84 epochs
2023-02-05 13:19:51,490 - mmcls - INFO - Epoch(val) [84][18]	accuracy_top-1: 95.1049
2023-02-05 13:19:56,905 - mmcls - INFO - Saving checkpoint at 85 epochs
2023-02-05 13:19:57,878 - mmcls - INFO - Epoch(val) [85][18]	accuracy_top-1: 94.7552
2023-02-05 13:20:03,281 - mmcls - INFO - Saving checkpoint at 86 epochs
2023-02-05 13:20:04,255 - mmcls - INFO - Epoch(val) [86][18]	accuracy_top-1: 95.2797
2023-02-05 13:20:09,650 - mmcls - INFO - Saving checkpoint at 87 epochs
2023-02-05 13:20:10,617 - mmcls - INFO - Epoch(val) [87][18]	accuracy_top-1: 95.4545
2023-02-05 13:20:16,097 - mmcls - INFO - Saving checkpoint at 88 epochs
2023-02-05 13:20:17,080 - mmcls - INFO - Epoch(val) [88][18]	accuracy_top-1: 94.9301
2023-02-05 13:20:22,519 - mmcls - INFO - Saving checkpoint at 89 epochs
2023-02-05 13:20:23,497 - mmcls - INFO - Epoch(val) [89][18]	accuracy_top-1: 95.4545
2023-02-05 13:20:28,928 - mmcls - INFO - Saving checkpoint at 90 epochs
2023-02-05 13:20:29,971 - mmcls - INFO - Epoch(val) [90][18]	accuracy_top-1: 95.8042
2023-02-05 13:20:35,372 - mmcls - INFO - Saving checkpoint at 91 epochs
2023-02-05 13:20:36,345 - mmcls - INFO - Epoch(val) [91][18]	accuracy_top-1: 95.8042
2023-02-05 13:20:41,732 - mmcls - INFO - Saving checkpoint at 92 epochs
2023-02-05 13:20:42,703 - mmcls - INFO - Epoch(val) [92][18]	accuracy_top-1: 95.6294
2023-02-05 13:20:48,118 - mmcls - INFO - Saving checkpoint at 93 epochs
2023-02-05 13:20:49,090 - mmcls - INFO - Epoch(val) [93][18]	accuracy_top-1: 95.2797
2023-02-05 13:20:54,523 - mmcls - INFO - Saving checkpoint at 94 epochs
2023-02-05 13:20:55,497 - mmcls - INFO - Epoch(val) [94][18]	accuracy_top-1: 94.9301
2023-02-05 13:21:00,930 - mmcls - INFO - Saving checkpoint at 95 epochs
2023-02-05 13:21:01,899 - mmcls - INFO - Epoch(val) [95][18]	accuracy_top-1: 95.1049
2023-02-05 13:21:07,301 - mmcls - INFO - Saving checkpoint at 96 epochs
2023-02-05 13:21:08,269 - mmcls - INFO - Epoch(val) [96][18]	accuracy_top-1: 95.2797
2023-02-05 13:21:13,654 - mmcls - INFO - Saving checkpoint at 97 epochs
2023-02-05 13:21:14,623 - mmcls - INFO - Epoch(val) [97][18]	accuracy_top-1: 95.1049
2023-02-05 13:21:20,038 - mmcls - INFO - Saving checkpoint at 98 epochs
2023-02-05 13:21:21,014 - mmcls - INFO - Epoch(val) [98][18]	accuracy_top-1: 95.9790
2023-02-05 13:21:26,478 - mmcls - INFO - Saving checkpoint at 99 epochs
2023-02-05 13:21:27,451 - mmcls - INFO - Epoch(val) [99][18]	accuracy_top-1: 95.4545
2023-02-05 13:21:32,922 - mmcls - INFO - Saving checkpoint at 100 epochs
2023-02-05 13:21:33,892 - mmcls - INFO - Epoch(val) [100][18]	accuracy_top-1: 95.1049
